{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "52a33131",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-08-23 08:03:46.114773: I tensorflow/core/util/util.cc:169] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.9.1\n",
      "1.23.2\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "\n",
    "print(tf.__version__)\n",
    "print(np.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f8d740e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import tensorflow_datasets as tfds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1f5dded1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-08-23 08:04:23.704625: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:23.872581: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:23.875144: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:23.881626: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-08-23 08:04:23.885712: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:23.888044: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:23.890267: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:25.763642: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:25.765304: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:25.766690: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:975] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n",
      "2022-08-23 08:04:25.768111: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1532] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13596 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:1e.0, compute capability: 7.5\n"
     ]
    }
   ],
   "source": [
    "(ds_train, ds_test), ds_info = tfds.load(\n",
    "    'stanford_dogs',\n",
    "    split=['train', 'test'],\n",
    "    as_supervised=True,\n",
    "    shuffle_files=True,\n",
    "    with_info=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fcf4f88a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize_and_resize_img(image, label):\n",
    "    # Normalizes images: `uint8` -> `float32`\n",
    "    image = tf.image.resize(image, [224, 224])\n",
    "    return tf.cast(image, tf.float32) / 255., label\n",
    "\n",
    "# basic augmentation\n",
    "def augment(image, label):\n",
    "    image = tf.image.random_flip_left_right(image)\n",
    "    image = tf.image.random_brightness(image, max_delta=0.2)\n",
    "    image = tf.clip_by_value(image, 0, 1)\n",
    "    return image, label\n",
    "\n",
    "def onehot(image, label):\n",
    "    label = tf.one_hot(label, num_classes)\n",
    "    return image, label\n",
    "\n",
    "def apply_normalize_on_dataset(ds, is_test=False, batch_size=16, with_aug=False, aug_method=None):\n",
    "    ds = ds.map(\n",
    "        normalize_and_resize_img, \n",
    "        num_parallel_calls=2\n",
    "    )\n",
    "    if not is_test and with_aug:\n",
    "        ds = ds.map(\n",
    "            augment\n",
    "        )\n",
    "    ds = ds.batch(batch_size)\n",
    "    # cutmix augmentation\n",
    "    if not is_test and aug_method=='cutmix':\n",
    "        ds = ds.map(\n",
    "            cutmix,\n",
    "            num_parallel_calls=2\n",
    "        )\n",
    "    # mixup augmentation\n",
    "    elif not is_test and aug_method=='mixup':\n",
    "        ds = ds.map(\n",
    "            mixup,\n",
    "            num_parallel_calls=2\n",
    "        )\n",
    "    else:\n",
    "        ds = ds.map(\n",
    "            onehot,\n",
    "            num_parallel_calls=2\n",
    "        )\n",
    "    if not is_test:\n",
    "        ds = ds.repeat()\n",
    "        ds = ds.shuffle(200)\n",
    "    ds = ds.prefetch(tf.data.experimental.AUTOTUNE)\n",
    "    return ds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "562e3957",
   "metadata": {},
   "source": [
    "### CutMix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5db6a126",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_clip_box(image_a, image_b):\n",
    "    # image.shape = (height, width, channel)\n",
    "    image_size_x = image_a.shape[1]\n",
    "    image_size_y = image_a.shape[0]\n",
    "    \n",
    "    # get center of box\n",
    "    x = tf.cast(tf.random.uniform([], 0, image_size_x), tf.int32)\n",
    "    y = tf.cast(tf.random.uniform([], 0, image_size_y), tf.int32)\n",
    "\n",
    "    # get width, height of box\n",
    "    width = tf.cast(image_size_x*tf.math.sqrt(1-tf.random.uniform([], 0, 1)), tf.int32)\n",
    "    height = tf.cast(image_size_y*tf.math.sqrt(1-tf.random.uniform([], 0, 1)), tf.int32)\n",
    "    \n",
    "    # clip box in image and get minmax bbox\n",
    "    x_min = tf.math.maximum(0, x-width//2)\n",
    "    y_min = tf.math.maximum(0, y-height//2)\n",
    "    x_max = tf.math.minimum(image_size_x, x+width//2)\n",
    "    y_max = tf.math.minimum(image_size_y, y+width//2)\n",
    "    \n",
    "    return x_min, y_min, x_max, y_max"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2db56c16",
   "metadata": {},
   "outputs": [],
   "source": [
    "# mix two images\n",
    "def mix_2_images(image_a, image_b, x_min, y_min, x_max, y_max):\n",
    "    image_size_x = image_a.shape[1]\n",
    "    image_size_y = image_a.shape[0] \n",
    "    middle_left = image_a[y_min:y_max, 0:x_min, :] # image_b의 왼쪽 바깥 영역\n",
    "    middle_center = image_b[y_min:y_max, x_min:x_max, :]  # image_b의 안쪽 영역\n",
    "    middle_right = image_a[y_min:y_max, x_max:image_size_x, :] # image_b의 오른쪽 바깥 영역\n",
    "    middle = tf.concat([middle_left,middle_center,middle_right], axis=1)\n",
    "    top = image_a[0:y_min, :, :]\n",
    "    bottom = image_a[y_max:image_size_y, :, :]\n",
    "    mixed_img = tf.concat([top, middle, bottom],axis=0)\n",
    "    \n",
    "    return mixed_img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a345cc60",
   "metadata": {},
   "outputs": [],
   "source": [
    "# mix two labels\n",
    "def mix_2_labels(image_a, image_b, label_a, label_b, x_min, y_min, x_max, y_max, num_classes=120):\n",
    "    image_size_x = image_a.shape[1]\n",
    "    image_size_y = image_a.shape[0] \n",
    "    mixed_area = (x_max-x_min)*(y_max-y_min)\n",
    "    total_area = image_size_x*image_size_y\n",
    "    ratio = tf.cast(mixed_area/total_area, tf.float32)\n",
    "\n",
    "    if len(label_a.shape)==0:\n",
    "        label_a = tf.one_hot(label_a, num_classes)\n",
    "    if len(label_b.shape)==0:\n",
    "        label_b = tf.one_hot(label_b, num_classes)\n",
    "    mixed_label = (1-ratio)*label_a + ratio*label_b\n",
    "\n",
    "    return mixed_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "397963ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cutmix(image, label, prob=1.0, batch_size=16, img_size=224, num_classes=120):\n",
    "    mixed_imgs = []\n",
    "    mixed_labels = []\n",
    "\n",
    "    for i in range(batch_size):\n",
    "        image_a = image[i]\n",
    "        label_a = label[i]\n",
    "        j = tf.cast(tf.random.uniform([],0, batch_size),tf.int32)\n",
    "        image_b = image[j]\n",
    "        label_b = label[j]\n",
    "        x_min, y_min, x_max, y_max = get_clip_box(image_a, image_b)\n",
    "        mixed_imgs.append(mix_2_images(image_a, image_b, x_min, y_min, x_max, y_max))\n",
    "        mixed_labels.append(mix_2_labels(image_a, image_b, label_a, label_b, x_min, y_min, x_max, y_max))\n",
    "\n",
    "    mixed_imgs = tf.reshape(tf.stack(mixed_imgs), (batch_size, img_size, img_size, 3))\n",
    "    mixed_labels = tf.reshape(tf.stack(mixed_labels), (batch_size, num_classes))\n",
    "    \n",
    "    return mixed_imgs, mixed_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c9a3ac7",
   "metadata": {},
   "source": [
    "### MixUp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3f5b8092",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for mixup\n",
    "def mixup_2_images(image_a, image_b, label_a, label_b):\n",
    "    ratio = tf.random.uniform([], 0, 1)\n",
    "    \n",
    "    if len(label_a.shape)==0:\n",
    "        label_a = tf.one_hot(label_a, num_classes)\n",
    "    if len(label_b.shape)==0:\n",
    "        label_b = tf.one_hot(label_b, num_classes)\n",
    "    mixed_image= (1-ratio)*image_a + ratio*image_b\n",
    "    mixed_label = (1-ratio)*label_a + ratio*label_b\n",
    "\n",
    "    return mixed_image, mixed_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4faf6744",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mixup(image, label, prob=1.0, batch_size=16, img_size=224, num_classes=120):\n",
    "    mixed_imgs = []\n",
    "    mixed_labels = []\n",
    "\n",
    "    for i in range(batch_size):\n",
    "        image_a = image[i]\n",
    "        label_a = label[i]\n",
    "        j = tf.cast(tf.random.uniform([],0,batch_size), tf.int32)\n",
    "        image_b = image[j]\n",
    "        label_b = label[j]\n",
    "        mixed_img, mixed_label = mixup_2_images(image_a, image_b, label_a, label_b)\n",
    "        mixed_imgs.append(mixed_img)\n",
    "        mixed_labels.append(mixed_label)\n",
    "\n",
    "    mixed_imgs = tf.reshape(tf.stack(mixed_imgs), (batch_size, img_size, img_size, 3))\n",
    "    mixed_labels = tf.reshape(tf.stack(mixed_labels), (batch_size, num_classes))\n",
    "    \n",
    "    return mixed_imgs, mixed_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0eac5431",
   "metadata": {},
   "source": [
    "### 데이터셋에 augmentation 적용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1c4df7dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_classes = ds_info.features[\"label\"].num_classes\n",
    "\n",
    "ds_train_no_aug = apply_normalize_on_dataset(ds_train)\n",
    "ds_train_aug = apply_normalize_on_dataset(ds_train, with_aug=True)\n",
    "\n",
    "ds_train_cutmix = apply_normalize_on_dataset(ds_train, with_aug=True, aug_method='cutmix')\n",
    "ds_train_mixup = apply_normalize_on_dataset(ds_train, with_aug=True, aug_method='mixup')\n",
    "\n",
    "ds_test = apply_normalize_on_dataset(ds_test, is_test=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca9869e4",
   "metadata": {},
   "source": [
    "### 모델 만들기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "24b5fd63",
   "metadata": {},
   "outputs": [],
   "source": [
    "#num_classes = ds_info.features[\"label\"].num_classes\n",
    "resnet50 = keras.models.Sequential([\n",
    "    keras.applications.resnet.ResNet50(\n",
    "        include_top=False,\n",
    "        weights='imagenet',\n",
    "        input_shape=(224,224,3),\n",
    "        pooling='avg',\n",
    "    ),\n",
    "    keras.layers.Dense(num_classes, activation='softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "58860801",
   "metadata": {},
   "outputs": [],
   "source": [
    "aug_resnet50 = keras.models.Sequential([\n",
    "    keras.applications.resnet.ResNet50(\n",
    "        include_top=False,\n",
    "        weights='imagenet',\n",
    "        input_shape=(224, 224,3),\n",
    "        pooling='avg',\n",
    "    ),\n",
    "    keras.layers.Dense(num_classes, activation = 'softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "157a4e07",
   "metadata": {},
   "outputs": [],
   "source": [
    "cutmix_resnet50 = keras.models.Sequential([\n",
    "    keras.applications.resnet.ResNet50(\n",
    "        include_top=False,\n",
    "        weights='imagenet',\n",
    "        input_shape=(224,224,3),\n",
    "        pooling='avg',\n",
    "    ),\n",
    "    keras.layers.Dense(num_classes, activation='softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bfbda741",
   "metadata": {},
   "outputs": [],
   "source": [
    "mixup_resnet50 = keras.models.Sequential([\n",
    "    keras.applications.resnet.ResNet50(\n",
    "        include_top=False,\n",
    "        weights='imagenet',\n",
    "        input_shape=(224,224,3),\n",
    "        pooling='avg',\n",
    "    ),\n",
    "    keras.layers.Dense(num_classes, activation='softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a902848e",
   "metadata": {},
   "source": [
    "### 모델 훈련"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "35bd7e7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# LMS 환경을 기준으로, 모델 학습에 epoch당 2~3분의 시간이 소요됩니다.\n",
    "# 학습이 너무 오래 걸릴 경우 epoch 수를 조절해 주세요\n",
    "\n",
    "EPOCH = 20\n",
    "#EPOCH = 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2f42cff",
   "metadata": {},
   "source": [
    "위에서 만든 CutMix나 Mixup을 사용하기 위해서는   \n",
    "앞에서 resnet50과 aug_resnet50을 훈련하는 데 사용했던  \n",
    "sparse_categorical_crossentropy() 대신 categorical_crossentropy()를 사용해야 한다.\n",
    "\n",
    "우리가 cutmix(), mixup()을 구현하면서  \n",
    "label의 mix 때문에 더이상 label이 스칼라값을 가지지 못하고 One-Hot 벡터 형태로 변환되었기 때문이다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1ef5b20",
   "metadata": {},
   "source": [
    "#### resnet50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3a317607",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "750/750 [==============================] - 158s 200ms/step - loss: 2.2239 - accuracy: 0.4439 - val_loss: 3.5200 - val_accuracy: 0.1669\n",
      "Epoch 2/20\n",
      "750/750 [==============================] - 155s 207ms/step - loss: 0.7766 - accuracy: 0.7822 - val_loss: 1.1146 - val_accuracy: 0.6789\n",
      "Epoch 3/20\n",
      "750/750 [==============================] - 158s 210ms/step - loss: 0.2425 - accuracy: 0.9472 - val_loss: 0.9575 - val_accuracy: 0.7212\n",
      "Epoch 4/20\n",
      "750/750 [==============================] - 157s 210ms/step - loss: 0.0622 - accuracy: 0.9947 - val_loss: 0.8969 - val_accuracy: 0.7431\n",
      "Epoch 5/20\n",
      "750/750 [==============================] - 157s 209ms/step - loss: 0.0227 - accuracy: 0.9993 - val_loss: 0.9019 - val_accuracy: 0.7422\n",
      "Epoch 6/20\n",
      "750/750 [==============================] - 156s 209ms/step - loss: 0.0133 - accuracy: 0.9999 - val_loss: 0.9168 - val_accuracy: 0.7457\n",
      "Epoch 7/20\n",
      "750/750 [==============================] - 170s 227ms/step - loss: 0.0096 - accuracy: 1.0000 - val_loss: 0.9329 - val_accuracy: 0.7442\n",
      "Epoch 8/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 0.0077 - accuracy: 1.0000 - val_loss: 0.9426 - val_accuracy: 0.7432\n",
      "Epoch 9/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0063 - accuracy: 1.0000 - val_loss: 0.9477 - val_accuracy: 0.7430\n",
      "Epoch 10/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0054 - accuracy: 1.0000 - val_loss: 0.9570 - val_accuracy: 0.7452\n",
      "Epoch 11/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0047 - accuracy: 1.0000 - val_loss: 0.9659 - val_accuracy: 0.7432\n",
      "Epoch 12/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0042 - accuracy: 1.0000 - val_loss: 0.9749 - val_accuracy: 0.7439\n",
      "Epoch 13/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0037 - accuracy: 1.0000 - val_loss: 0.9813 - val_accuracy: 0.7420\n",
      "Epoch 14/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0034 - accuracy: 1.0000 - val_loss: 0.9864 - val_accuracy: 0.7429\n",
      "Epoch 15/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0031 - accuracy: 1.0000 - val_loss: 0.9910 - val_accuracy: 0.7438\n",
      "Epoch 16/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0028 - accuracy: 1.0000 - val_loss: 0.9969 - val_accuracy: 0.7427\n",
      "Epoch 17/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0026 - accuracy: 1.0000 - val_loss: 1.0023 - val_accuracy: 0.7410\n",
      "Epoch 18/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0024 - accuracy: 1.0000 - val_loss: 1.0058 - val_accuracy: 0.7424\n",
      "Epoch 19/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 0.0023 - accuracy: 1.0000 - val_loss: 1.0106 - val_accuracy: 0.7422\n",
      "Epoch 20/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 0.0021 - accuracy: 1.0000 - val_loss: 1.0126 - val_accuracy: 0.7420\n"
     ]
    }
   ],
   "source": [
    "# no augmentation\n",
    "resnet50.compile(\n",
    "    loss='categorical_crossentropy',\n",
    "    optimizer=tf.keras.optimizers.SGD(lr=0.01),\n",
    "    metrics=['accuracy'],\n",
    ")\n",
    "\n",
    "history_no_aug = resnet50.fit(\n",
    "    ds_train_no_aug, # augmentation 적용하지 않은 데이터셋 사용\n",
    "    steps_per_epoch=int(ds_info.splits['train'].num_examples/16),\n",
    "    validation_steps=int(ds_info.splits['test'].num_examples/16),\n",
    "    epochs=EPOCH,\n",
    "    validation_data=ds_test,\n",
    "    verbose=1,\n",
    "    use_multiprocessing=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a78dc533",
   "metadata": {},
   "source": [
    "#### resnet50 with aug"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "29181ad7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "750/750 [==============================] - 166s 213ms/step - loss: 2.2696 - accuracy: 0.4301 - val_loss: 2.6050 - val_accuracy: 0.3404\n",
      "Epoch 2/20\n",
      "750/750 [==============================] - 171s 229ms/step - loss: 0.9347 - accuracy: 0.7304 - val_loss: 1.1290 - val_accuracy: 0.6632\n",
      "Epoch 3/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 0.4910 - accuracy: 0.8692 - val_loss: 1.0730 - val_accuracy: 0.6883\n",
      "Epoch 4/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.2403 - accuracy: 0.9472 - val_loss: 1.1478 - val_accuracy: 0.6777\n",
      "Epoch 5/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.1214 - accuracy: 0.9793 - val_loss: 1.0525 - val_accuracy: 0.7086\n",
      "Epoch 6/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0721 - accuracy: 0.9908 - val_loss: 1.0272 - val_accuracy: 0.7192\n",
      "Epoch 7/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 0.0431 - accuracy: 0.9958 - val_loss: 0.9436 - val_accuracy: 0.7368\n",
      "Epoch 8/20\n",
      "750/750 [==============================] - 155s 207ms/step - loss: 0.0304 - accuracy: 0.9971 - val_loss: 1.0168 - val_accuracy: 0.7261\n",
      "Epoch 9/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0417 - accuracy: 0.9944 - val_loss: 1.1478 - val_accuracy: 0.6976\n",
      "Epoch 10/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 0.0205 - accuracy: 0.9979 - val_loss: 1.0016 - val_accuracy: 0.7343\n",
      "Epoch 11/20\n",
      "750/750 [==============================] - 159s 213ms/step - loss: 0.0108 - accuracy: 0.9997 - val_loss: 0.9641 - val_accuracy: 0.7513\n",
      "Epoch 12/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0106 - accuracy: 0.9992 - val_loss: 0.9840 - val_accuracy: 0.7450\n",
      "Epoch 13/20\n",
      "750/750 [==============================] - 159s 213ms/step - loss: 0.0073 - accuracy: 0.9998 - val_loss: 0.9781 - val_accuracy: 0.7484\n",
      "Epoch 14/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0059 - accuracy: 1.0000 - val_loss: 0.9854 - val_accuracy: 0.7460\n",
      "Epoch 15/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0049 - accuracy: 1.0000 - val_loss: 0.9826 - val_accuracy: 0.7492\n",
      "Epoch 16/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0052 - accuracy: 0.9998 - val_loss: 0.9951 - val_accuracy: 0.7472\n",
      "Epoch 17/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0044 - accuracy: 0.9998 - val_loss: 0.9992 - val_accuracy: 0.7476\n",
      "Epoch 18/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0037 - accuracy: 1.0000 - val_loss: 1.0082 - val_accuracy: 0.7484\n",
      "Epoch 19/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0036 - accuracy: 0.9998 - val_loss: 1.0114 - val_accuracy: 0.7484\n",
      "Epoch 20/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 0.0034 - accuracy: 0.9999 - val_loss: 1.0132 - val_accuracy: 0.7494\n"
     ]
    }
   ],
   "source": [
    "# basic augmentation\n",
    "aug_resnet50.compile(\n",
    "    loss='categorical_crossentropy',\n",
    "    optimizer=tf.keras.optimizers.SGD(lr=0.01),\n",
    "    metrics=['accuracy'],\n",
    ")\n",
    "\n",
    "history_aug = aug_resnet50.fit(\n",
    "    ds_train_aug, # augmentation 적용한 데이터셋 사용\n",
    "    steps_per_epoch=int(ds_info.splits['train'].num_examples/16),\n",
    "    validation_steps=int(ds_info.splits['test'].num_examples/16),\n",
    "    epochs=EPOCH,\n",
    "    validation_data=ds_test,\n",
    "    verbose=1,\n",
    "    use_multiprocessing=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "307dbdeb",
   "metadata": {},
   "source": [
    "#### resnet50 with cutmix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f32d45a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "750/750 [==============================] - 168s 214ms/step - loss: 3.8804 - accuracy: 0.2025 - val_loss: 3.1910 - val_accuracy: 0.2289\n",
      "Epoch 2/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 3.0463 - accuracy: 0.4043 - val_loss: 1.5264 - val_accuracy: 0.5810\n",
      "Epoch 3/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 2.7563 - accuracy: 0.4991 - val_loss: 1.3981 - val_accuracy: 0.6171\n",
      "Epoch 4/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 2.5916 - accuracy: 0.5394 - val_loss: 1.4162 - val_accuracy: 0.6192\n",
      "Epoch 5/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 2.4403 - accuracy: 0.5874 - val_loss: 1.2803 - val_accuracy: 0.6454\n",
      "Epoch 6/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 2.3296 - accuracy: 0.6270 - val_loss: 1.3364 - val_accuracy: 0.6315\n",
      "Epoch 7/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 2.2439 - accuracy: 0.6497 - val_loss: 1.2132 - val_accuracy: 0.6667\n",
      "Epoch 8/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 2.1581 - accuracy: 0.6758 - val_loss: 1.0951 - val_accuracy: 0.6982\n",
      "Epoch 9/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 2.0749 - accuracy: 0.7035 - val_loss: 1.1663 - val_accuracy: 0.6865\n",
      "Epoch 10/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 2.0328 - accuracy: 0.7169 - val_loss: 1.2016 - val_accuracy: 0.6831\n",
      "Epoch 11/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 1.9748 - accuracy: 0.7341 - val_loss: 1.2729 - val_accuracy: 0.6635\n",
      "Epoch 12/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 1.9345 - accuracy: 0.7394 - val_loss: 1.3841 - val_accuracy: 0.6399\n",
      "Epoch 13/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 1.8994 - accuracy: 0.7570 - val_loss: 1.2443 - val_accuracy: 0.6820\n",
      "Epoch 14/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 1.8897 - accuracy: 0.7504 - val_loss: 1.3632 - val_accuracy: 0.6556\n",
      "Epoch 15/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 1.8183 - accuracy: 0.7726 - val_loss: 1.3140 - val_accuracy: 0.6727\n",
      "Epoch 16/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 1.7902 - accuracy: 0.7753 - val_loss: 1.2120 - val_accuracy: 0.6884\n",
      "Epoch 17/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 1.7786 - accuracy: 0.7751 - val_loss: 1.2216 - val_accuracy: 0.6997\n",
      "Epoch 18/20\n",
      "750/750 [==============================] - 159s 213ms/step - loss: 1.7461 - accuracy: 0.7825 - val_loss: 1.3713 - val_accuracy: 0.6650\n",
      "Epoch 19/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 1.7033 - accuracy: 0.7929 - val_loss: 1.3292 - val_accuracy: 0.6690\n",
      "Epoch 20/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 1.6945 - accuracy: 0.7983 - val_loss: 1.3728 - val_accuracy: 0.6623\n"
     ]
    }
   ],
   "source": [
    "# basic augmentation + cutmix\n",
    "cutmix_resnet50.compile(\n",
    "    loss='categorical_crossentropy',\n",
    "    optimizer=tf.keras.optimizers.SGD(lr=0.01),\n",
    "    metrics=['accuracy'],\n",
    ")\n",
    "\n",
    "history_cutmix = cutmix_resnet50.fit(\n",
    "    ds_train_cutmix, # augmentation + cutmix 적용한 데이터셋 사용\n",
    "    steps_per_epoch=int(ds_info.splits['train'].num_examples/16),\n",
    "    validation_steps=int(ds_info.splits['test'].num_examples/16),\n",
    "    epochs=EPOCH,\n",
    "    validation_data=ds_test,\n",
    "    verbose=1,\n",
    "    use_multiprocessing=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79f41435",
   "metadata": {},
   "source": [
    "#### resnet50 with mixup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "297361bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "750/750 [==============================] - 167s 214ms/step - loss: 3.7883 - accuracy: 0.2240 - val_loss: 3.8454 - val_accuracy: 0.1335\n",
      "Epoch 2/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 2.9303 - accuracy: 0.4493 - val_loss: 1.5351 - val_accuracy: 0.5736\n",
      "Epoch 3/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 2.6866 - accuracy: 0.5392 - val_loss: 1.4684 - val_accuracy: 0.5949\n",
      "Epoch 4/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 2.5302 - accuracy: 0.5986 - val_loss: 1.4632 - val_accuracy: 0.5970\n",
      "Epoch 5/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 2.3884 - accuracy: 0.6521 - val_loss: 1.2505 - val_accuracy: 0.6515\n",
      "Epoch 6/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 2.3071 - accuracy: 0.6869 - val_loss: 1.2880 - val_accuracy: 0.6426\n",
      "Epoch 7/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 2.2191 - accuracy: 0.7198 - val_loss: 1.1212 - val_accuracy: 0.6904\n",
      "Epoch 8/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 2.1322 - accuracy: 0.7433 - val_loss: 1.2375 - val_accuracy: 0.6546\n",
      "Epoch 9/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 2.0769 - accuracy: 0.7670 - val_loss: 1.2754 - val_accuracy: 0.6635\n",
      "Epoch 10/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 2.0342 - accuracy: 0.7782 - val_loss: 1.1480 - val_accuracy: 0.6845\n",
      "Epoch 11/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 1.9850 - accuracy: 0.7972 - val_loss: 1.1769 - val_accuracy: 0.6891\n",
      "Epoch 12/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 1.9769 - accuracy: 0.8021 - val_loss: 1.1361 - val_accuracy: 0.7013\n",
      "Epoch 13/20\n",
      "750/750 [==============================] - 159s 211ms/step - loss: 1.9521 - accuracy: 0.8102 - val_loss: 1.1888 - val_accuracy: 0.6840\n",
      "Epoch 14/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 1.9286 - accuracy: 0.8177 - val_loss: 1.1293 - val_accuracy: 0.7020\n",
      "Epoch 15/20\n",
      "750/750 [==============================] - 158s 211ms/step - loss: 1.8914 - accuracy: 0.8240 - val_loss: 1.3154 - val_accuracy: 0.6604\n",
      "Epoch 16/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 1.8562 - accuracy: 0.8302 - val_loss: 1.2016 - val_accuracy: 0.6776\n",
      "Epoch 17/20\n",
      "750/750 [==============================] - 172s 230ms/step - loss: 1.8400 - accuracy: 0.8352 - val_loss: 1.2577 - val_accuracy: 0.6775\n",
      "Epoch 18/20\n",
      "750/750 [==============================] - 159s 212ms/step - loss: 1.8174 - accuracy: 0.8421 - val_loss: 1.2948 - val_accuracy: 0.6704\n",
      "Epoch 19/20\n",
      "750/750 [==============================] - 160s 213ms/step - loss: 1.8237 - accuracy: 0.8380 - val_loss: 1.2797 - val_accuracy: 0.6692\n",
      "Epoch 20/20\n",
      "750/750 [==============================] - 160s 214ms/step - loss: 1.7887 - accuracy: 0.8453 - val_loss: 1.3267 - val_accuracy: 0.6595\n"
     ]
    }
   ],
   "source": [
    "# basic augmentation + mixup\n",
    "mixup_resnet50.compile(\n",
    "    loss='categorical_crossentropy',\n",
    "    optimizer=tf.keras.optimizers.SGD(lr=0.01),\n",
    "    metrics=['accuracy'],\n",
    ")\n",
    "\n",
    "history_mixup = mixup_resnet50.fit(\n",
    "    ds_train_mixup, # augmentation + mixup 적용한 데이터셋 사용\n",
    "    steps_per_epoch=int(ds_info.splits['train'].num_examples/16),\n",
    "    validation_steps=int(ds_info.splits['test'].num_examples/16),\n",
    "    epochs=EPOCH,\n",
    "    validation_data=ds_test,\n",
    "    verbose=1,\n",
    "    use_multiprocessing=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41bcc2a7",
   "metadata": {},
   "source": [
    "### 훈련 결과 시각화"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f5ac648f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 8))\n",
    "plt.plot(history_no_aug.history['val_accuracy'], 'r')\n",
    "plt.plot(history_aug.history['val_accuracy'], 'b')\n",
    "plt.plot(history_cutmix.history['val_accuracy'], 'g')\n",
    "plt.plot(history_mixup.history['val_accuracy'], 'k')\n",
    "plt.title('Model validation accuracy')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend(['No Augmentation', 'With Augmentation', 'With CutMix', 'With MixUp'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e0514c2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
